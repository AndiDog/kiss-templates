#!/usr/bin/env python3
import functools
import os
from pprint import pprint
import re
import subprocess
import sys

class ValidationError(Exception): pass

def check_output(cmd, expect_process_error=False):
    try:
        return subprocess.check_output(cmd)
    except Exception as e:
        if not expect_process_error or not isinstance(e, subprocess.CalledProcessError):
            print('Exception while running cmd %s' % (cmd,))
        raise

def changes():
    return check_output(('git', 'diff', '--no-ext-diff', '--cached', '-U0'))

def toplevel():
    return check_output(('git', 'rev-parse', '--show-toplevel')).strip(b'\n').decode('utf-8')

def toList(fn):
    return functools.wraps(fn)(lambda *args, **kwargs: list(fn(*args, **kwargs)))

top = toplevel()

clangformat = "/usr/local/clang_3_6_0/bin/clang-format"

### CLANG-FORMAT BEGIN
if os.path.exists(os.path.join(top, '.clang-format')):
    reformatted_files = []
    files_had_unstaged_edits = []
    for filename in check_output(['git', 'diff-index', '--cached', '--name-only', 'HEAD']).decode('utf-8').splitlines():
        if any(filename.endswith(ext) for ext in ('.cpp', '.h', '.hpp')):
            file_path = os.path.join(top, filename)

            with open(file_path, 'rb') as f:
                staged = f.read()

            if staged.startswith(b'// generated by kiste2cpp'):
                continue

            formatted = check_output([clangformat, file_path])

            if staged == formatted:
                continue

            try:
                check_output(['git', 'diff', '--exit-code', file_path], expect_process_error=True)
            except subprocess.CalledProcessError:
                files_had_unstaged_edits.append(filename)

            check_output([clangformat, '-i', file_path])

            try:
                check_output(['git', 'diff', '--exit-code', file_path], expect_process_error=True)
            except subprocess.CalledProcessError:
                reformatted_files.append(filename)

    if reformatted_files:
        print('These files were reformatted with clang-format, please stage the changes first:\n- %s'
              % '\n- '.join(reformatted_files), file=sys.stderr)
    if files_had_unstaged_edits:
        print('\nThese files had unstaged edits before clang-format reformatting. Please stage desired parts and confirm the commit again.\n- %s'
              % '\n- '.join(files_had_unstaged_edits), file=sys.stderr)
    if reformatted_files or files_had_unstaged_edits:
        exit(1)
### CLANG-FORMAT END

exit(0)
diff = changes()

@toList
def getDonotsubmitLines(diff):
    lines = diff.decode('ascii', 'ignore').splitlines()
    for line in lines:
        if line.startswith('-'):
            continue

        if 'DONOTSUBMIT' in line or 'ANDI' in line or 'TODO ANDI' in line or 'blabla' in line:
            yield line

ignore_donotsubmit = False
if top.endswith('/my-git-hooks'):
    ignore_donotsubmit = True
    print('Ignoring DONOTSUBMIT items')

if not ignore_donotsubmit:
    assert getDonotsubmitLines(b'\n+ ANDI \n')
    assert not getDonotsubmitLines(b'\n- ANDI \n')
    donotsubmitMatchingLines = getDonotsubmitLines(diff)
    if donotsubmitMatchingLines:
        print('Found DONOTSUBMIT in changes:\n%s' % '\n'.join(donotsubmitMatchingLines), file=sys.stderr)
        exit(1)

difflines = diff.splitlines()
file_diff_indices = []
for i in range(len(difflines)):
    if difflines[i].startswith(b'diff --git'):
        file_diff_indices.append(i)
file_diffs = []
for i, index in enumerate(file_diff_indices):
    file_diffs.append(b'\n'.join(difflines[index:(file_diff_indices + [len(difflines)])[i+1]]))

for file_diff in file_diffs:
    in_diff = file_diff.splitlines()[0] # git --diff a/blabla/file b/blabla/file

    ignore_trailing_whitespace = False
    ignore_mixed_leading_space = False

    # Allow whitespace and space mismatch
    if b'.lyx ' in in_diff or b'.tex ' in in_diff:
        ignore_trailing_whitespace = True
        ignore_mixed_leading_space = True

    if 'instant-screenscraping' in os.path.abspath(u'.') and b'tests/test_' in in_diff and b'.html' in in_diff:
        ignore_trailing_whitespace = True
        ignore_mixed_leading_space = True

    if not ignore_trailing_whitespace:
        whitespace_match = re.search(rb'^\+.*?[\t ]+$', file_diff, re.MULTILINE)
        if whitespace_match:
            print('Trailing whitespace:\n%s\nIN: %s' % (whitespace_match.group().strip().decode('utf-8'), in_diff), file=sys.stderr)
            exit(1)

    if b'.cpp ' in in_diff and b'R++' in file_diff:
        print('Possibly wrong C++ raw string\nIN: %s' % in_diff, file=sys.stderr)
        exit(1)

    if not ignore_mixed_leading_space:
        leading_space_match = re.search(rb'^\+ +.*$', file_diff, re.MULTILINE)
        leading_tab_match = re.search(rb'^\+\t+.*$', file_diff, re.MULTILINE)
        if leading_space_match and leading_tab_match:
            print('Mixed leading space\n%s\nAND\n%s\nIN: %s'
                   % (leading_space_match.group().strip().decode('utf-8'),
                      leading_tab_match.group().strip().decode('utf-8'),
                      in_diff),
                   file=sys.stderr)
            exit(1)

        # Check Eclipse inserting tab in between (e.g. happens for .mako files)
        has_space_then_tab = False
        for space_then_tab_match in re.finditer(rb'^\+ +\t.*$', file_diff, re.MULTILINE):
            has_space_then_tab = True
            print(space_then_tab_match.group().strip().decode('utf-8'), file=sys.stderr)
        if has_space_then_tab:
            print('Mixed space, then tab indentation in: %s' % in_diff, file=sys.stderr)
            exit(1)

exit(0)
