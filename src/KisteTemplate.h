// generated by kiste2cpp
#pragma once
#include <kiste/terminal.h>

#line 1 "../src/KisteTemplate.kiste"
namespace kiste
{
template<typename DERIVED_T, typename DATA_T, typename SERIALIZER_T>
struct KisteTemplate_t
{
  DERIVED_T& child;
  using _data_t = DATA_T;
  const _data_t& data;
  using _serializer_t = SERIALIZER_T;
  _serializer_t& _serialize;

  KisteTemplate_t(DERIVED_T& derived, const DATA_T& data_, SERIALIZER_T& serialize):
    child(derived),
    data(data_),
    _serialize(serialize)
  {}
  // ----------------------------------------------------------------------
#line 4

    void render_header()
    {
      _serialize.text("// generated by kiste2cpp\n"
             "#pragma once\n");
      if (data.report_exceptions)
      {
        _serialize.text("#include <exception>\n");
      }
      _serialize.text("#include <kiste/terminal.h>\n"
             "\n"
             "#line 1 \""); _serialize.escape(data.filename); _serialize.text("\"\n");
    }

    void render_footer()
    {
      _serialize.text("\n");
    }

  // ----------------------------------------------------------------------
#line 23
};

#line 23
template<typename DATA_T, typename SERIALIZER_T>
auto KisteTemplate(const DATA_T& data, SERIALIZER_T& serialize)
  -> KisteTemplate_t<kiste::terminal_t, DATA_T, SERIALIZER_T>
{
  return {kiste::terminal, data, serialize};
}

#line 24
}


