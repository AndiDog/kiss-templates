%namespace kiste
%{
  $class ClassTemplate

    %void render_header()
    %{
      $|template<typename DERIVED_T, typename DATA_T, typename SERIALIZER_T>
      $|struct ${data.class_data.name}_t
      %if (!data.class_data.parent_name.empty())
      %{
      $|   : public ${data.class_data.parent_name}_t<${data.class_data.name}_t<DERIVED_T, DATA_T, SERIALIZER_T>, DATA_T, SERIALIZER_T>
      %}
      $|{
      %if (!data.class_data.parent_name.empty())
      %{
      $|  using _parent_t = ${data.class_data.parent_name}_t<${data.class_data.name}_t, DATA_T, SERIALIZER_T>;
      $|  _parent_t& parent;
      %}
      $|  DERIVED_T& child;
      $|  using _data_t = DATA_T;
      $|  const _data_t& data;
      $|  using _serializer_t = SERIALIZER_T;
      $|  _serializer_t& _serialize;

      $|  ${data.class_data.name}_t(DERIVED_T& derived, const DATA_T& data_, SERIALIZER_T& serialize):
      %if (!data.class_data.parent_name.empty())
      %{
      $|    _parent_t{*this, data_, serialize},
      $|    parent(*this),
      %}
      $|    child(derived),
      $|    data(data_),
      $|    _serialize(serialize)
      $|  {}
      $|  // ----------------------------------------------------------------------
      $|#line ${data.line_no + 1}
    %}

    %template<typename Member>
    %void render_member(const Member& member)
    %{
      %// The "using" is required for clang-3.1 and older g++ versions
      %const auto class_alias = member.class_name + "_t_alias";
      $|using ${class_alias} = ${member.class_name}_t<${data.class_data.name}_t, _data_t, _serializer_t>;$|
      $|${class_alias} ${member.name} = ${class_alias}{*this, data, _serialize};
    %}

    %void render_footer()
    %{
      $|  // ----------------------------------------------------------------------
      $|#line ${data.line_no}
      $|};

      $|#line ${data.line_no}
      $|template<typename DATA_T, typename SERIALIZER_T>
      $|auto ${data.class_data.name}(const DATA_T& data, SERIALIZER_T& serialize)
      $|  -> ${data.class_data.name}_t<kiste::terminal_t, DATA_T, SERIALIZER_T>
      $|{
      $|  return {kiste::terminal, data, serialize};
      $|}

      $|#line ${data.line_no + 1}
    %}

  $endclass
%}
