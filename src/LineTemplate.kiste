%#include "segment_type.h"
%#include "line_type.h"

%namespace kiste
%{
  $class LineTemplate

    %void open_exception_handling()
    %{
      %if (data._report_exceptions)
      %{
        $| try$|
        $| { $|
      %}
    %}

    %void close_exception_handling(const std::string& expression)
    %{
      %if (data._report_exceptions)
      %{
        $| }$|
        $| catch(...)$|
        $| {$|
        $| _serialize.report_exception(__LINE__, "${expression}", std::current_exception());$|
        $| } $|
      %}
    %}

    %void escape(const std::string& expression)
    %{
      $|$call{open_exception_handling()}$|
      $|_serialize.escape($raw{expression});$|
      $|$call{close_exception_handling(expression)}$|
    %}

    %void raw(const std::string& expression)
    %{
      $|$call{open_exception_handling()}$|
      $|_serialize.raw($raw{expression});$|
      $|$call{close_exception_handling(expression)}$|
    %}

    %void call(const std::string& expression)
    %{
      $|$call{open_exception_handling()}$|
      $|static_assert(std::is_same<decltype($raw{expression}), void>::value, "$$call{} requires void expression"); ($raw{expression});$|
      $|$call{close_exception_handling(expression)}$|
    %}

    %void open_string(bool& string_opened)
    %{
      %if (not string_opened)
      %{
        $|_serialize.text($|
      %}
      %string_opened = true;
    %}

    %void close_string(bool& string_opened)
    %{
      %if (string_opened)
      %{
        $|);$|
      %}
      %string_opened = false;
    %}

    %void text_segment(const std::string& line)
    %{
      $|"${line}"$|
    %}

    %void render_none()
    %{

    %}

    %template<typename Line>
    %void render_text(const Line& line)
    %{
      %for (std::size_t i = 0; i < line._curly_level; ++i)
      %{
        $|  $|
      %}
      %auto string_opened = line.starts_with_text() && line._previous_line_ends_with_text;
      %if (string_opened)
      %{
        $|                $|
      %}
      %for (const auto& segment : line._segments)
      %{
        %switch(segment._type)
        %{
        %case segment_type::text:
          $|$call{open_string(string_opened)}$|
          $|$call{text_segment(segment._text)}$|
          %break;
        %case segment_type::trim_trailing_return:
          %break;
        %case segment_type::escape:
          $|$call{close_string(string_opened)}$|
          $|$call{escape(segment._text)}$|
          %break;
        %case segment_type::call:
          $|$call{close_string(string_opened)}$|
          $|$call{call(segment._text)}$|
          %break;
        %case segment_type::raw:
          $|$call{close_string(string_opened)}$|
          $|$call{raw(segment._text)}$|
          %break;
        %}
      %}
      %if (not line._next_line_starts_with_text)
      %{
        $|$call{close_string(string_opened)}$|
      %}

    %}

    %template<typename Line>
    %void render_cpp(const Line& line)
    %{
      $|$raw{line._segments[0]._text}
    %}

  $endclass
%}
