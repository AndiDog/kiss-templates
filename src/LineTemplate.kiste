%#include "command_type.h"
%#include "line_type.h"

%namespace kiste
%{
  $class LineTemplate

    %void open_exception_handling()
    %{
      %if (data.report_exceptions)
      %{
        $|try$|
        $|{$|
      %}
    %}

    %void close_exception_handling(const std::string& expression)
    %{
      %if (data.report_exceptions)
      %{
        $|}$|
        $|catch(...)$|
        $|{$|
        $|  _serialize.report_exception(__LINE__, "${expression}", std::current_exception());$|
        $|}$|
      %}
    %}

    %void escape(const std::string& expression)
    %{
      $|$call{open_exception_handling()}$|
      $| _serialize.escape($raw{expression}); $|
      $|$call{close_exception_handling(expression)}$|
    %}

    %void raw(const std::string& expression)
    %{
      $|$call{open_exception_handling()}$|
      $| _serialize.raw($raw{expression}); $|
      $|$call{close_exception_handling(expression)}$|
    %}

    %void call(const std::string& expression)
    %{
      $call{open_exception_handling()}
      $|static_assert(std::is_same<decltype($raw{expression}), void>::value, "$$call{} requires void expression"); ($raw{expression}); $|
      $call{close_exception_handling(expression)}
    %}

    %void open_string(bool& string_opened)
    %{
      %if (not string_opened)
      %{
        $|_serialize.text($|
      %}
      %string_opened = true;
    %}

    %void close_string(bool& string_opened)
    %{
      %if (string_opened)
      %{
        $|);$|
      %}
      %string_opened = false;
    %}

    %void text_segment(const std::string& line)
    %{
      $|"${line}"$|
    %}

    %void render_none()
    %{

    %}

    %template<typename Line>
    %void render_text(const Line& line)
    %{
      %auto string_opened = (line.previous_type == line_type::text);
      %for (const auto& segment : line.commands)
      %{
        %switch(segment.type)
        %{
        %case command_type::text:
          $|$call{open_string(string_opened)}$|
          $|$call{text_segment(segment.text)}$|
          %break;
        %case command_type::trim_trailing_return:
          $|$call{close_string(string_opened)}$|
          %break;
        %case command_type::escape:
          $|$call{close_string(string_opened)}$|
          $|$call{escape(segment.text)}$|
          %break;
        %case command_type::call:
          $|$call{close_string(string_opened)}$|
          $|$call{call(segment.text)}$|
          %break;
        %case command_type::raw:
          $|$call{close_string(string_opened)}$|
          $|$call{raw(segment.text)}$|
          %break;
        %}
      %}
      %if (line.next_type != line_type::text)
      %{
        $|$call{close_string(string_opened)}$|
      %}
      %if (line.trailing_return)
      %{

      %}
    %}

    %template<typename Line>
    %void render_cpp(const Line& line)
    %{
      $|$raw{line.commands[0].text}
    %}

% void old_code()
% {
      %/*
    //ctx.open_text();
    //ctx.os << "  ";
    //for (std::size_t i = 0; i < ctx.curly_level; ++i)
    //{
      //ctx.os << "  ";
    //}
    %*/

% }
  $endclass
%}
